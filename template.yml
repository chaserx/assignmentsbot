AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'send email daily from assignments posted on a public google calendar'

Parameters:
  EnvGCal:
    Type : 'AWS::SSM::Parameter::Value<String>'
    Default: assignmentsbotCalendar
  EnvAPIKey:
    Type : 'AWS::SSM::Parameter::Value<String>'
    Default: assignmentsbotAPIKey
  EnvMailgunAPIKey:
    Type : 'AWS::SSM::Parameter::Value<String>'
    Default: mailgunAPIKey
  EnvMailgunDomain:
    Type : 'AWS::SSM::Parameter::Value<String>'
    Default: mailgunDomain
  BucketName:
    Type: String
    Description: The name for the bucket hosting your website
    AllowedPattern: ^[a-z0-9][a-z0-9-.]{1,61}[a-z0-9]$
    Default: assignmentsbot.com

Api:
  # enable CORS; to make more specific, change the origin wildcard
  # to a particular domain name, e.g. "'www.example.com'"
  Cors:
    AllowMethods: "'*'"
    AllowHeaders: "'*'"
    AllowOrigin: "'*'"

Resources:
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      VersioningConfiguration:
        Status: Enabled
    DeletionPolicy: Retain
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub "arn:aws:s3:::${WebsiteBucket}/*"
  AssignmentsbotOutgoingMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      Runtime: ruby2.5
      CodeUri: ./
      Environment:
        Variables:
          CALENDAR: !Ref EnvGCal
          API_KEY: !Ref EnvAPIKey
          MAILGUN_API_KEY: !Ref EnvMailgunAPIKey
          MAILGUN_DOMAIN: !Ref EnvMailgunDomain
          DDB_PERSON_TABLE: !Ref PeopleDynamoDBTable
          DDB_TEAM_TABLE: !Ref TeamsDynamoDBTable
      MemorySize: 512
      Timeout: 60
      Events:
        Weekday4pmCron:
          Name: Weekday4pmESTCron
          Type: Schedule
          Properties:
            Schedule: cron(0 21 ? * MON-FRI *)
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref PeopleDynamoDBTable
      - DynamoDBCrudPolicy:
          TableName: !Ref TeamsDynamoDBTable
  AssignmentsbotCreatePersonFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: api/person_api.create
      Runtime: ruby2.5
      CodeUri: ./
      Environment:
        Variables:
          DDB_PERSON_TABLE: !Ref PeopleDynamoDBTable
      MemorySize: 512
      Timeout: 60
      Events:
        Post:
          Type: 'Api'
          Properties:
            Path: '/people'
            Method: 'post'
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref PeopleDynamoDBTable
  LambdaLocalCorsStub:
    Type: AWS::Serverless::Function
    Properties:
      Handler: api/cors_options.handler
      Runtime: ruby2.5
      FunctionName: LocalCorsOptions
      CodeUri: ./
      Timeout: 30
      Events:
        peopleOptions: # This block must be repeated for each endpoint that needs CORS support in SAM Local
          Type: 'Api'
          Properties:
            Path: '/people'
            Method: 'options'
  PeopleDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "abPeopleTable-prod"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        -
          AttributeName: "email_address"
          AttributeType: "S"
        -
          AttributeName: "confirmation_token"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "email_address"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        -
          IndexName: "confirmation_token_index"
          KeySchema:
            -
              AttributeName: "confirmation_token"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"
  TeamsDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "abTeamsTable-prod"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        -
          AttributeName: "name"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "name"
          KeyType: "HASH"

Outputs:
  AssignmentsbotOutgoingMessageFunction:
    Description: "Assignmentsbot Outgoing Message Function ARN"
    Value: !GetAtt AssignmentsbotOutgoingMessageFunction.Arn

  AssignmentsbotOutgoingMessageFunctionIamRole:
    Description: "Implicit IAM Role created for Assignmentsbot Outgoing Message Function ARN"
    Value: !GetAtt AssignmentsbotOutgoingMessageFunctionRole.Arn

  PersonApi:
    Description: "API Gateway endpoint URL for Prod stage for API Gateway Multi-Origin CORS function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

  PersonCreate:
    Description: "API Gateway Multi-Origin CORS Lambda Function (Root) ARN"
    Value: !GetAtt AssignmentsbotCreatePersonFunction.Arn
